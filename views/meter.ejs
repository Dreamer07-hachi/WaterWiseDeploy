<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meter - WaterWise</title>
    <link rel="stylesheet" href="/styles/styles.css">
    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body class="center-layout">
<%- include('partials/header') %>
    <nav>
        <a href="/dashboard">Meter Dashboard</a>
        <a href="/settings">Monthly Goal</a>
    </nav>
    
    <main class="main-content">
        <div class="input-screen">
            <h2>New Water Reading</h2>
            <div class="form-group">
                <label for="unit">Unit of Measurement:</label>
                <select id="unit" name="unit">
                    <option value="cubic_meters">Cubic Meters (m³)</option>
                    <option value="cubic_feet">Cubic Feet (ft³)</option>
                </select>
            </div>
            <form id="reading-form">
                <div class="form-group">
                    <input type="number" id="meter-reading" placeholder="e.g., 15700" autofocus />
                    <p class="helper-text" id="last-reading-text">Fetching last reading...</p>
                    <p class="error-text" id="error-message">Reading must be higher than last reading.</p>
                </div>
                <button type="submit" id="submit-button" disabled>Save Reading</button>
            </form>
        </div>
    </main>

    <div class="history-container">
        <h3>Recent History</h3>
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Reading (m³)</th>
                </tr>
            </thead>
            <tbody id="history-table-body">
                </tbody>
        </table>
    </div>

    <script>
        let lastReading = 0; // Will be updated by fetching data
        const readingInput = document.getElementById('meter-reading');
        const submitButton = document.getElementById('submit-button');
        const errorMessage = document.getElementById('error-message');
        const readingForm = document.getElementById('reading-form');
        const lastReadingText = document.getElementById('last-reading-text');

        // Function to fetch the last reading from the server
        async function fetchLastReading() {
            // NOTE: This assumes you will create a '/api/last-reading' endpoint later.
            // For now, we'll use a placeholder.
            // const response = await fetch('/api/last-reading');
            // const data = await response.json();
            // lastReading = data.reading_value;

            // Using sample data for now:
            lastReading = 66200; // Using the last value from our big sample data
            lastReadingText.textContent = `Last reading: ${lastReading}`;
            errorMessage.textContent = `Reading must be higher than ${lastReading}.`;
        }

        async function fetchRecentHistory() {
    try {
        const response = await fetch('/api/recent-readings', { cache: 'no-store' });
        const data = await response.json();
        const tableBody = document.getElementById('history-table-body');
        tableBody.innerHTML = ''; // Clear existing rows

        if (data.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="2">No readings yet.</td></tr>';
            return;
        }

        data.forEach(reading => {
            const date = new Date(reading.created_at).toLocaleDateString('en-IN', {
                day: 'numeric', month: 'short', year: 'numeric'
            });
            const value = parseFloat(reading.reading_value).toFixed(2);
            
            const row = `<tr><td>${date}</td><td>${value}</td></tr>`;
            tableBody.innerHTML += row;
        });

    } catch (error) {
        console.error("Could not fetch recent history:", error);
    }
}


        // --- Input Validation ---
        readingInput.addEventListener('input', () => {
            const currentValue = Number(readingInput.value);
            if (currentValue > lastReading) {
                submitButton.disabled = false;
                errorMessage.style.display = 'none';
            } else {
                submitButton.disabled = true;
                if (readingInput.value !== '') {
                    errorMessage.style.display = 'block';
                } else {
                    errorMessage.style.display = 'none';
                }
            }
        });

        // --- Form Submission Logic ---
        readingForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const readingValue = Number(readingInput.value);
            const selectedUnit = document.getElementById('unit').value;
            submitButton.textContent = 'Saving...';
            submitButton.disabled = true;

            try {
                const response = await fetch('/api/readings', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ readingValue, unit: selectedUnit }),
                });
                if (!response.ok) throw new Error('Server responded with an error.');
                alert('Success! Your reading has been saved.');
                window.location.href = '/dashboard'; // Redirect to dashboard on success
            } catch (error) {
                console.error('Failed to save reading:', error);
                alert('Error: Could not save your reading. Please try again.');
                submitButton.textContent = 'Save Reading';
            }
        });
        
        // Fetch the last reading when the page loads
        window.onload = () => {
    fetchLastReading();
    fetchRecentHistory(); // <-- Add this line
};
    </script>
</body>
</html>